#!/usr/bin/env perl
use v5.10.1;
no warnings;
use File::Spec;

my $TERM = (-t 1 ? $ENV{TERM} : undef) // "dumb";

my %GRAPH = (
	sm => "│ ",
	im => "├─",
	ie => "└─",
	se => "  ",
	ct => do { given ($TERM) {
		when ("dumb")       { "" }
		when (/-256color$/) { "\e[38;5;59m" }
		default             { "\e[36m" }
	} },
	cs => do { given ($TERM) {
		when ("dumb")       { "" }
		when (/-256color$/) { "\e[38;5;109m" }
		default             { "\e[36m" }
	} },
	cr => do { given ($TERM) {
		when ("dumb") { "" }
		default       { "\e[m" }
	} },
);

my $tree = {};
my $maxdepth = 0;
my $path;

sub canonpath {
	my $path = shift;
	if ($path =~ m|^(\./)|) {
		return $1 . File::Spec->canonpath($path);
	} else {
		return File::Spec->canonpath($path);
	}
}

sub split_path {
	my $path = canonpath(shift);
	$path =~ s!(^|/) [^/]+ / \.\. (/|$)!$1$2!gx;
	$path =~ s!^/!!;
	split m!/!, $path;
}

sub walk {
	my $branch = shift;
	my @path = split_path(shift);
	for (@path) {
		$branch = $branch->{$_} //= {};
	}
	return $branch;
}

sub deepcount {
	my $branch = shift;
	my $count = 0;
	for (values %$branch) {
		$count += 1 + deepcount($_);
	}
	return $count;
}

sub show {
	my $branch = shift // $tree;
	my $depth = shift // 0;
	my $graph = shift // [];
	my @keys = sort keys %$branch;
	my $shallow = $maxdepth && $depth >= $maxdepth;
	while (@keys) {
		my $item = shift @keys;
		my $children = keys $branch->{$item};
		if ($shallow && $children) {
			$children = deepcount($branch->{$item});
		}
		$graph->[$depth] = $depth ? @keys ? $GRAPH{im} : $GRAPH{ie} : "";
		print	$GRAPH{ct},
			"@$graph",
			$children ? $GRAPH{cs} : $GRAPH{cr},
			$item,
			$GRAPH{ct},
			$children ? "/" : "",
			($shallow && $children) ? " ($children)" : "",
			$GRAPH{cr},
			"\n";
		next if $shallow;
		$graph->[$depth] = $depth ? @keys ? $GRAPH{sm} : $GRAPH{se} : "";
		show($branch->{$item}, $depth+1, $graph);
	}
	pop $graph;
}

for (@ARGV) {
	if (/^-(\d+)$/) {
		$maxdepth = $1;
	} else {
		$path = canonpath($_);
	}
}

while (<STDIN>) {
	chomp; walk($tree, $_);
}

my $visible = $path ? {$path => walk($tree, $path)}
                    : $tree;

show($visible);
